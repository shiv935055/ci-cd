pipeline {
    agent {
        docker {
            image 'shiv9350/ultimate-cicd:8'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: 'main']],
                    extensions: [
                        [$class: 'CloneOption', depth: 1, noTags: false, shallow: true],
                        [$class: 'LocalBranch', localBranch: 'main']
                    ],
                    userRemoteConfigs: [[
                        url: 'https://github.com/shiv935055/ci-cd.git',
                        credentialsId: 'github-token'
                    ]]
                ])
                
                // Set safe directory immediately after checkout
                sh 'git config --global --add safe.directory /var/lib/jenkins/workspace/third-pipeline'
            }
        }
        
        stage('Build and Test') {
            steps {
                sh 'ls -ltr'
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
            }
        }
        
        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://3.110.33.155:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonar', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }
        
        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "shiv9350/ultimate-cicd-2:${BUILD_NUMBER}"
            }
            steps {
                script {
                    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                    docker.withRegistry('https://index.docker.io/v1/', 'docker') {
                        docker.image("${DOCKER_IMAGE}").push()
                    }
                }
            }
        }
        
        stage('Update Deployment File') {
            steps {
                withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                    script {
                        sh '''
                            git config --global user.email "xyz@gmail.com"
                            git config --global user.name "shiv935055"
                            git config --global --add safe.directory /var/lib/jenkins/workspace/third-pipeline
                            git status
                            git branch -a
                        '''
                        
                        sh """
                            # Ensure we're on main branch
                            git checkout main
                            git pull origin main
                            
                            # Update deployment file
                            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                            
                            # Check if there are changes
                            if git diff --quiet java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml; then
                                echo "No changes detected in deployment file"
                            else
                                git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                                git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                                git push https://${GITHUB_TOKEN}@github.com/shiv935055/ci-cd.git main:main
                            fi
                        """
                    }
                }
            }
        }
    }
    
    post {
        failure {
            echo "Pipeline failed! Check the Git branch state and deployment file."
        }
    }
}
