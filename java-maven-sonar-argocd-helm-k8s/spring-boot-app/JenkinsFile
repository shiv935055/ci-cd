pipeline {
    agent {
        docker {
            image 'shiv9350/ultimate-cicd:8'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
            reuseNode true
        }
    }
    
    options {
        skipDefaultCheckout(true)
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
                sh 'mkdir -p /tmp/workspace && chmod -R 755 /tmp/workspace'
            }
        }
        
        stage('Checkout') {
            steps {
                checkout scm
                sh 'chmod -R 755 . || true'
            }
        }
        
        stage('Build and Test') {
            steps {
                sh 'ls -ltr'
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
            }
            post {
                always {
                    sh 'chmod -R 755 java-maven-sonar-argocd-helm-k8s/spring-boot-app/target/ || true'
                }
            }
        }
        
        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://3.110.33.155:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonar', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
            post {
                always {
                    sh 'chmod -R 755 . || true'
                }
            }
        }
        
        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "shiv9350/ultimate-cicd-2:${BUILD_NUMBER}"
            }
            steps {
                script {
                    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                    docker.withRegistry('https://index.docker.io/v1/', 'docker') {
                        docker.image("${DOCKER_IMAGE}").push()
                    }
                }
            }
        }
        
        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "ci-cd"
                GIT_USER_NAME = "shiv935055"
            }
            steps {
                withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                    script {
                        // Configure git globally
                        sh '''
                            git config --global user.email "xyz@gmail.com"
                            git config --global user.name "shiv935055"
                        '''
                        
                        // Verify git status and fix permissions
                        sh '''
                            git status
                            git remote -v
                            chmod -R 755 . || true
                        '''
                        
                        // Update the deployment file with better error handling
                        sh """
                            if [ -f "java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml" ]; then
                                echo "File exists. Updating image tag..."
                                sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                                echo "File updated successfully"
                                cat java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml | grep image:
                            else
                                echo "ERROR: deployment.yml file not found!"
                                find . -name "deployment.yml" -type f
                                exit 1
                            fi
                        """
                        
                        // Commit and push changes with better error handling
                        sh """
                            git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                            
                            # Check if there are changes to commit
                            if git diff --cached --quiet; then
                                echo "No changes to commit"
                            else
                                git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                            fi
                            
                            # Pull latest changes before pushing to avoid conflicts
                            git pull https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git main --rebase --no-edit || true
                            
                            # Push changes
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo "Pipeline completed - cleaning up"
            sh 'chmod -R 755 . || true'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed! Check the logs above for details.'
        }
    }
}
