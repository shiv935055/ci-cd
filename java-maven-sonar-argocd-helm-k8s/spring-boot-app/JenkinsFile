pipeline {
    agent {
        docker {
            image 'shiv9350/ultimate-cicd:8'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock -v /tmp/workspace:/workspace'
            reuseNode true
        }
    }
    
    environment {
        WORKSPACE_DIR = '/workspace'
    }
    
    stages {
        stage('Prepare Workspace') {
            steps {
                sh 'mkdir -p ${WORKSPACE_DIR} && chmod -R 777 ${WORKSPACE_DIR}'
                dir('${WORKSPACE_DIR}') {
                    checkout scm
                }
            }
        }
        
        stage('Build and Test') {
            steps {
                dir('${WORKSPACE_DIR}') {
                    sh 'ls -ltr'
                    sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
                }
            }
        }
        
        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://3.110.33.155:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'sonar', variable: 'SONAR_AUTH_TOKEN')]) {
                    dir('${WORKSPACE_DIR}') {
                        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                    }
                }
            }
        }
        
        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "shiv9350/ultimate-cicd-2:${BUILD_NUMBER}"
            }
            steps {
                script {
                    dir('${WORKSPACE_DIR}') {
                        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                    }
                    docker.withRegistry('https://index.docker.io/v1/', 'docker') {
                        docker.image("${DOCKER_IMAGE}").push()
                    }
                }
            }
        }
        
        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "ci-cd"
                GIT_USER_NAME = "shiv935055"
            }
            steps {
                withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                    script {
                        dir('${WORKSPACE_DIR}') {
                            sh '''
                                git config --global user.email "xyz@gmail.com"
                                git config --global user.name "shiv935055"
                                sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                                git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                                git commit -m "Update deployment image to version ${BUILD_NUMBER}" || true
                                git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git HEAD:main
                            '''
                        }
                    }
                }
            }
        }
    }
}
