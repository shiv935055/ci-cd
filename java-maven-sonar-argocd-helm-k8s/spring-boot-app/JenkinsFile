pipeline {
    agent {
        docker {
            image 'shiv9350/ultimate-cicd:8'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        SONAR_URL = "http://3.110.33.155:9000"
        DOCKER_REGISTRY = "https://index.docker.io/v1/"
        DOCKER_CREDENTIALS = credentials('docker')
        GIT_REPO_NAME = "ci-cd"
        GIT_USER_NAME = "shiv935055"
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout code on host (not inside container)
                checkout([$class: 'GitSCM',
                          branches: [[name: 'main']],
                          userRemoteConfigs: [[url: 'https://github.com/shiv935055/ci-cd.git']]
                ])
            }
        }

        stage('Build and Test') {
            steps {
                sh '''
                    ls -ltr
                    cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                    mvn clean package
                '''
            }
        }

        stage('Static Code Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonar', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh '''
                        cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                        mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}
                    '''
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    sh '''
                        cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                        docker build -t shiv9350/ultimate-cicd:${BUILD_NUMBER} .
                    '''

                    def dockerImage = docker.image("shiv9350/ultimate-cicd:${BUILD_NUMBER}")
                    docker.withRegistry("${DOCKER_REGISTRY}", "docker") {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Update Deployment File') {
            agent any   // Run on host where Git is available
            steps {
                withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        git config user.email "shiv@gmail.com"
                        git config user.name "shiv kumar"

                        BUILD_NUMBER=${BUILD_NUMBER}
                        sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml

                        git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
                        git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "No changes to commit"
                        git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                    '''
                }
            }
        }
    }
}
